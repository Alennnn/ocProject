<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://10.20.91.130/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.online.college.core.user.dao.UserFollowsDao">

	<resultMap id="BeanResultMap" type="com.online.college.core.user.domain.UserFollows" >
		<id column="id" property="id" jdbcType="INTEGER"/>
		<result column="user_id" property="userId"  jdbcType="VARCHAR" />
		<result column="follow_id" property="followId"  jdbcType="VARCHAR" />
		<result column="create_time" property="createTime"  jdbcType="DATE" />
		<result column="create_user" property="createUser"  jdbcType="VARCHAR" />
		<result column="update_time" property="updateTime"  jdbcType="TIMESTAMP" />
		<result column="update_user" property="updateUser"  jdbcType="VARCHAR" />
		<result column="del" property="del"  jdbcType="TINYINT" />
	</resultMap> 

	<sql id="All_Columns">
		user_id, follow_id, create_time, create_user, update_time, update_user, 
		del, id 
	</sql>

	<select id="queryAll" parameterType="com.online.college.core.user.domain.UserFollows" resultType="com.online.college.core.user.domain.UserFollows">
		SELECT 
		<include refid="All_Columns" />
		FROM t_user_follows 
		<trim prefix="WHERE " prefixOverrides="AND |OR "> 
			<if test="userId != null">
				AND user_id = #{userId, jdbcType=INTEGER}
			</if>
			<if test="followId != null">
				AND follow_id = #{followId, jdbcType=INTEGER}
			</if>
		</trim>
		ORDER BY id
	</select>

	<select id="getTotalItemsCount" parameterType="com.online.college.core.user.domain.UserFollows" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM t_user_follows
		WHERE del = 0 
	</select>

	<select id="queryPage" resultType="com.online.college.core.user.domain.UserFollows">
		SELECT 
		<include refid="All_Columns" />
		FROM t_user_follows
		WHERE del = 0 
		ORDER BY id
		LIMIT #{param2.startIndex, jdbcType=INTEGER} , #{param2.pageSize, jdbcType=INTEGER} 
	</select>

	<select id="getFollowStudyRecordCount" parameterType="com.online.college.core.user.domain.UserFollowStudyRecord" resultType="java.lang.Integer">
		SELECT COUNT(cs.id)
		FROM 
		t_user_follows f ,t_user_course_section cs
		WHERE f.user_id = #{userId, jdbcType=INTEGER} 
		AND f.follow_id = cs.user_id 
		AND f.del = 0
	</select>

	<select id="queryFollowStudyRecord" resultType="com.online.college.core.user.domain.UserFollowStudyRecord">
		SELECT 
		cs.course_id, cs.section_id , f.follow_id, 
		c.name as courseName, s.name as sectionName, 
		u.username,u.header,cs.create_time
		FROM 
		t_user_follows f ,t_user_course_section cs, t_course c , t_course_section s, t_auth_user u
		WHERE f.user_id = #{param1.userId, jdbcType=INTEGER} 
		AND f.follow_id = cs.user_id 
		AND f.del = 0
		AND f.follow_id = u.id
		AND cs.course_id = c.id
		AND cs.section_id = s.id
		ORDER BY cs.id DESC
		LIMIT #{param2.startIndex, jdbcType=INTEGER} , #{param2.pageSize, jdbcType=INTEGER} 
	</select>

	<select id="getById" parameterType="java.lang.Long" resultType="com.online.college.core.user.domain.UserFollows">
		SELECT 
		<include refid="All_Columns"  />
		FROM t_user_follows
		WHERE id = #{id, jdbcType=INTEGER}
	</select>

	<insert id="create" parameterType="com.online.college.core.user.domain.UserFollows" flushCache="true"  useGeneratedKeys="true" keyProperty="id"  >
		INSERT INTO t_user_follows
		( user_id, follow_id, create_time, create_user, update_time, update_user, 
		del, id ) 
		VALUES 
		( #{userId, jdbcType=VARCHAR}, #{followId, jdbcType=VARCHAR}, #{createTime, jdbcType=DATE}, #{createUser, jdbcType=VARCHAR}, #{updateTime, jdbcType=TIMESTAMP}, #{updateUser, jdbcType=VARCHAR}, 
		#{del, jdbcType=TINYINT}, #{id, jdbcType=VARCHAR} ) 
	</insert>
	
	<insert id="createSelectivity" parameterType="com.online.college.core.user.domain.UserFollows" flushCache="true"  useGeneratedKeys="true" keyProperty="id"  >
		INSERT INTO t_user_follows
		<trim prefix="(" suffix=")"  suffixOverrides="," >
			<if test="userId != null ">
			user_id,
			</if>
			<if test="followId != null ">
			follow_id,
			</if>
			<if test="createTime != null ">
			create_time,
			</if>
			<if test="createUser != null ">
			create_user,
			</if>
			<if test="updateTime != null ">
			update_time,
			</if>
			<if test="updateUser != null ">
			update_user,
			</if>
			<if test="del != null ">
			del,
			</if>
		</trim>
		VALUES
		<trim prefix="(" suffix=")"  suffixOverrides="," >
			<if test="userId != null ">
			#{userId, jdbcType=INTEGER},
			</if>
			<if test="followId != null ">
			#{followId, jdbcType=INTEGER},
			</if>
			<if test="createTime != null ">
			#{createTime, jdbcType=DATE},
			</if>
			<if test="createUser != null ">
			#{createUser, jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null ">
			#{updateTime, jdbcType=TIMESTAMP},
			</if>
			<if test="updateUser != null ">
			#{updateUser, jdbcType=VARCHAR},
			</if>
			<if test="del != null ">
			#{del, jdbcType=TINYINT},
			</if>
		</trim>
	</insert>

	<update id="update" parameterType="com.online.college.core.user.domain.UserFollows" flushCache="true">
		UPDATE t_user_follows SET 
		user_id = #{userId, jdbcType=VARCHAR},
		follow_id = #{followId, jdbcType=VARCHAR},
		update_time = #{updateTime, jdbcType=TIMESTAMP},
		update_user = #{updateUser, jdbcType=VARCHAR}
		WHERE id = #{id, jdbcType=INTEGER} 
	</update>

	<update id="updateSelectivity" parameterType="com.online.college.core.user.domain.UserFollows" flushCache="true">
		UPDATE t_user_follows
		<trim prefix="SET" suffixOverrides="," >
			<if test="userId != null ">
			user_id = #{userId, jdbcType=VARCHAR},
			</if>
			<if test="followId != null ">
			follow_id = #{followId, jdbcType=VARCHAR},
			</if>
			<if test="updateTime != null ">
			update_time = #{updateTime, jdbcType=TIMESTAMP},
			</if>
			<if test="updateUser != null ">
			update_user = #{updateUser, jdbcType=VARCHAR},
			</if>
			<if test="del != null ">
			del = #{del, jdbcType=TINYINT},
			</if>
		</trim>
		WHERE id = #{id, jdbcType = INTEGER}

	</update>

	<delete id="delete" parameterType="com.online.college.core.user.domain.UserFollows" >
		DELETE FROM t_user_follows
		WHERE id = #{id, jdbcType=INTEGER}
	</delete>

	<update id="deleteLogic" parameterType="com.online.college.core.user.domain.UserFollows" flushCache="true">
		UPDATE t_user_follows
		SET del = 1
		WHERE id = #{id, jdbcType=INTEGER}
	</update>

</mapper>
